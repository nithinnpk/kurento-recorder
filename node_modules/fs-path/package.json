{
  "name": "fs-path",
  "version": "0.0.22",
  "main": "lib/index.js",
  "author": {
    "name": "pillys",
    "email": "pillys@163.com",
    "url": "http://www.calljs.com"
  },
  "keywords": [
    "fs-path",
    "file",
    "directory"
  ],
  "repository": {
    "url": "https://github.com/pillys/fs-path",
    "type": "git"
  },
  "bugs": {
    "url": "https://github.com/pillys/fs-path/issues"
  },
  "homepage": "https://github.com/pillys/fs-path",
  "dependencies": {
    "async": "~0.9.0"
  },
  "description": "file and directory op libs, find, findSync, mkdir, mkdirSync, copy, copySync, remove, removeSync, writeFile, writeFileSync",
  "readmeFilename": "README.md",
  "readme": "fs-path\r\n========\r\n[![Build Status](https://secure.travis-ci.org/pillys/fs-path.png)](http://travis-ci.org/pillys/fs-path)\r\n\r\nUseful file utitiles. See [API Documentation](http://pillys.github.com/fs-path/#FsPath) for detailed info.\r\n\r\n---\r\n\r\n### find(path [,filter] [,callback])\r\n\r\nRecurcively scan files or scan files by a filter.\r\n\r\nCallback break tow arguments: err, list\r\n\r\n```js\r\nvar fsPath = require('fs-path');\r\n\r\nfsPath.find('/usr/local', function(err, list){\r\n  console.log(list.dirs);\r\n  console.log(list.files);\r\n});\r\n```\r\n\r\nThe value list is an object has two keys:\r\n\r\n```js\r\n{\r\n  dirs: [\r\n    '/usr/local/test'\r\n    '/usr/local/test/abc'\r\n  ],\r\n  files: [\r\n    '/usr/local/aaa.png',\r\n    '/usr/local/test/bbb.gif',\r\n    '/usr/local/test/abc/ddd.html'\r\n  ]\r\n}\r\n```\r\n\r\nIf you set a filter to map the files or directories, you can do like this:\r\n\r\n```js\r\nvar fsPath = require('fs-path');\r\n\r\nfsPath.find('/usr/local', function(filepath, stats, filename){\r\n  if(stats === 'file' && /\\.png$/.test(filename)){\r\n    return false;\r\n  }\r\n  return true;\r\n}, function(err, list){\r\n  console.log(list.dirs);\r\n  console.log(list.files);\r\n});\r\n```\r\n\r\nfilter has 3 arguments:\r\n\r\n* filepath: the full path of the file or directory\r\n* stats: the type of file or directory, has two value: file, directory\r\n* filename: the name of the file or directory\r\n\r\nIt will return the list:\r\n\r\n```js\r\n{\r\n  dirs: [\r\n    '/usr/local/test'\r\n    '/usr/local/test/abc'\r\n  ],\r\n  files: [\r\n    '/usr/local/test/bbb.gif',\r\n    '/usr/local/test/abc/ddd.html'\r\n  ]\r\n}\r\n```\r\n\r\n### findSync(path[ ,filter])\r\n\r\nSync version of find(). Throws exception on error.\r\n\r\n\r\n### mkdir(path[, callback])\r\n\r\nRecursively make, if the parent path not exists, it'll create the directory automatically.\r\n\r\n```js\r\nvar fsPath = require('fs-path');\r\n\r\nfsPath.mkdir('/usr/local/test1/test2/test3', function(err){\r\n  console.log('ok');\r\n});\r\n```\r\n\r\n### mkdirSync(path[ ,pattern])\r\n\r\nSync version of mkdir(). Throws exception on error.\r\n\r\n\r\n### copy(from, dist[, callback])\r\n\r\nCopy a file or directory to other path, if the parent path not exists, it'll create the directory automatically.\r\n\r\n```js\r\nvar fsPath = require('fs-path');\r\n\r\nfsPath.copy('/usr/local/test1/test2/test3', '/usr/local/aaaa', function(err){\r\n  console.log('ok');\r\n});\r\n```\r\n\r\n### copySync(path[ ,pattern])\r\n\r\nSync version of copy(). Throws exception on error.\r\n\r\n\r\n### remove(path[, callback])\r\n\r\nDelete a file or directory.\r\n\r\n```js\r\nvar fsPath = require('fs-path');\r\n\r\nfsPath.remove('/usr/local/test1/test2/test3', function(err){\r\n  console.log('ok');\r\n});\r\n```\r\n\r\n### removeSync(path)\r\n\r\nSync version of remove(). Throws exception on error.\r\n\r\n\r\n### writeFile(path, content[, encoding][, callback])\r\n\r\nWrite a file a file or directory.\r\n\r\nEncoding is optional, default is 'utf-8'.\r\n\r\n```js\r\nvar fsPath = require('fs-path');\r\n\r\nfsPath.writeFile('/usr/local/1.html', content function(err){\r\n  console.log('ok');\r\n});\r\n```\r\n\r\n### writeFileSync(path, content[, encoding])\r\n\r\nSync version of writeFile(). Throws exception on error.\r\n",
  "_id": "fs-path@0.0.22",
  "dist": {
    "shasum": "f54e4f0d54fe35181f4bc71883a93e87d63f2499"
  },
  "_from": "fs-path@",
  "_resolved": "https://registry.npmjs.org/fs-path/-/fs-path-0.0.22.tgz"
}
